{{/* Append the hardcoded settings */}}
{{- define "docmost.harcodedValues" -}}
env:
  {{- with .Values.ingress.main }}
  {{- if and .enabled (hasKey (first .hosts) "host") }}
  APP_URL: http{{ if .tls }}s{{ end }}://{{ (first .hosts).host }}
  {{- end }}
  {{- end }}

  APP_SECRET:
    secretKeyRef:
      name: {{ $.Release.Name }}-app
      key: appSecret

  {{- if .Values.docmost.jwtTokenExperies }}
  JWT_TOKEN_EXPIRES_IN: {{ .Values.docmost.jwtTokenExperies }}
  {{- end }}
  
  {{- if .Values.docmost.FileUploadSizeLimit }}
  FILE_UPLOAD_SIZE_LIMIT: {{ .Values.docmost.FileUploadSizeLimit }}
  {{- end }}

  {{- if .Values.docmost.drawioUrl }}
  DRAWIO_URL: {{ .Values.docmost.drawioUrl }}
  {{- end }}

  {{- if .Values.postgresql.enabled }}

  DATABASE_PASSWORD:
    secretKeyRef:
      name: {{ $.Release.Name }}-postgresql
      key: password
      
  {{- with .Values.postgresql.auth }}
  DATABASE_URL: 'postgresql://{{ default "docmost" .username }}:$(DATABASE_PASSWORD)@{{ $.Release.Name }}-postgresql/{{ default "docmost" .database }}?schema=public'
  {{- end }}
  {{- end }}

  {{- if .Values.redis.enabled }}
  REDIS_URL: 'redis://{{ $.Release.Name }}-redis-master:6379'
  {{- end }}

  STORAGE_DRIVER: {{ .Values.docmost.storage.type }}

  {{- if (eq .Values.docmost.storage.type "s3") }}
  {{- with .Values.docmost.s3 }}
  AWS_S3_ACCESS_KEY_ID:
    secretKeyRef:
      name: {{ $.Release.Name }}-app
      key: accessKey
  AWS_S3_SECRET_ACCESS_KEY:
    secretKeyRef:
      name: {{ $.Release.Name }}-app
      key: secretKey
  AWS_S3_REGION: {{ .region }}
  AWS_S3_BUCKET: {{ .bucket }}
  AWS_S3_ENDPOINT: {{ .endpoint }}
  AWS_S3_FORCE_PATH_STYLE: {{ .pathStyle }}
  {{- end }}
  {{- end }}

  {{- if .Values.docmost.mail.enabled }}
  {{- with .Values.docmost.mail }}
  MAIL_DRIVER: {{ .type }}
  {{- if (eq .type "smtp") }}
  SMTP_HOST: {{ .smtp.host }}
  SMTP_PORT: {{ .smtp.port }}
  SMTP_USERNAME:
    secretKeyRef:
      name: {{ $.Release.Name }}-app
      key: smtp-username
  SMTP_PASSWORD:
    secretKeyRef:
      name: {{ $.Release.Name }}-app
      key: smtp-password
  SMTP_SECURE: {{ .smtp.secure }}
  {{- else if eq .type "postmark" }}
  POSTMARK_TOKEN: {{ .postmark.token }}
  {{- end }}
  MAIL_FROM_ADDRESS: {{ .fromAddress }}
  MAIL_FROM_NAME: {{ .fromName }}
  {{- end }}
  {{- end }}

initContainers:
  wait-for-postgres:
    image: bitnami/postgresql:{{ .Values.postgresql.image.tag }}
    command: ['sh', '-c', 'until pg_isready -U "{{ .Values.postgresql.auth.username }}" -d "dbname={{ .Values.postgresql.auth.database }}" -h {{ $.Release.Name }}-postgresql -p 5432; do echo waiting for postgres; sleep 2; done;']
  wait-for-redis:
    image: bitnami/redis:{{ .Values.redis.image.tag }}
    command: ['sh', '-c', 'until redis-cli -h {{ $.Release.Name }}-redis-master ping | grep PONG; do echo waiting for redis; sleep 2; done;']

probes:
  liveness: &probes
    enabled: true
    custom: true
    spec:
      httpGet:
        path: /api/health
        port: http
      initialDelaySeconds: 0
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3
  readiness: *probes
  startup:
    enabled: true
    custom: true
    spec:
      httpGet:
        path: /api/health
        port: http
      initialDelaySeconds: 0
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 30

{{- end -}}
{{- $_ := merge .Values (include "docmost.harcodedValues" . | fromYaml) -}}

{{/* Render the templates */}}
{{ include "bjw-s.common.loader.all" . }}